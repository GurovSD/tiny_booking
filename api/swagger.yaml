openapi: 3.0.1
info:
  title: Shop
  version: 1.0.0
servers:
- url: /
paths:
  /user/login:
    post:
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "400":
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        "200":
          description: successful logout
          content: {}
  /items:
    get:
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
                x-content-type: application/json
        "400":
          description: Invalid price range
          content: {}
    post:
      summary: Add a new item to the store
      operationId: CreateItem
      requestBody:
        description: Item object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        required: true
      responses:
        "405":
          description: Invalid input
      security:
      - api_key: []
  /items/upload_image:
    post:
      summary: uploads an image
      operationId: uploadFile
      requestBody:
        description: Additional data to pass to server
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/items_upload_image_body'
        required: true
      responses:
        "201":
          description: file uploaded
      security:
      - api_key: []
  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        "400":
          description: Invalid ID supplied
          content: {}
    put:
      summary: Updates an item in the store with form data
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/items_itemId_body'
      responses:
        "405":
          description: Invalid input
          content: {}
      security:
      - api_key: []
    delete:
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: Item id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Item not found
          content: {}
      security:
      - api_key: []
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
      example:
        image_link: image_link
        price: 6
        name: name
        description: description
        id: 0
    items_upload_image_body:
      type: object
      properties:
        additionalMetadata:
          type: string
        fileName:
          type: string
          description: file to upload
          format: binary
    items_itemId_body:
      properties:
        name:
          type: string
          description: Updated name of the item
        status:
          type: string
          description: Updated status of the item
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
